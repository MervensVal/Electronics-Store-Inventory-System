*Python Concepts to include

-Lists
-Dictionary
-For Else
-Functions Parameters
-Anonymous/Lambda functions
-Using Lambda expressions
-Special Variable __name__

-OOP
-Class variables
-instance method vs class method vs static method
-Inner Class: Class inside a class
-Method Overloading & Overriding
-Abstract Class
-Exception Handeling
-MultiThreading

-------------------------------------------------

*DB Fields

Category (Device Type) Table
CategoryID
CategoryName


Product Table
ProductID 
*CategoryID
*LocationID
ProductName
CPU
RAM
Storage
OS
Price
Description
IsDefective 


Location Table
LocationID
*ManagerID
*ContactID
StreetName
Unit
City
State
Country
Zip Code

Contact Table
ContactID
Phone
Email
Fax
ContactType (Store, Employee, Etc)

------------------------------------------

VARCHAR — Data is stored in the NLS_CHARACTERSET encoding. If there are other database instances on the same server, you may be restricted by them; and vice versa, since you have to share the setting. 
Such a field can store any data that can be encoded using that character set, and nothing else. So for example if the character set is MS-1252, you can only store characters like English letters, 
a handful of accented letters, and a few others (like € and —). Your application would be useful only to a few locales, unable to operate anywhere else in the world. For this reason, it is considered A Bad Idea.
(Positive is that it might take up less space)

*NVARCHAR — Data is stored in a Unicode encoding. Every language is supported. A Good Idea. ll modern operating systems and development platforms use Unicode internally. By using nvarchar rather than varchar, 
you can avoid doing encoding conversions every time you read from or write to the database. 

------------------------------------------

Project Template/Features

- Category, Location, and Contact Table will be seeded via sql query
- Log folder is created
- Report Folder is created
- Archive Folder

- Product Table will have data that is imported
- Product Data starts off in a json file
- Import data into database

- Generate Report1 with full product information
- Generate Report2 with count seperated by category

- Create Executable file: 
https://www.youtube.com/watch?v=bqNvkAfTvIc
https://www.youtube.com/watch?v=wp2pNVUl3lc
------------------------------------------
decimal [(p [,s])]

Where,

p stands for Precision, the total number of digits in the value, i.e. on both sides of the decimal point
s stands for Scale, number of digits after the decimal point
The default value of p is 18 and s is 0 and for both these values, the minimum is 1 and the maximum is 38.

In short, by defining parameters in the SQL Decimal data type, we are estimating how many digits a column or a variable will have and also the number of digits to the right of the decimal point.

For instance, decimal (4,2) indicates that the number will have 2 digits before the decimal point and 2 digits after the decimal point, something like this has to be the number value- ##.##.

Here, 'precision' refers to the total number of digits, and 'scale' refers to the number of digits after the decimal point.

Usage of DECIMAL and NUMERIC Data Types
In SQL, DECIMAL and NUMERIC data types are used when the exactness of data is crucial. For instance, in financial applications where precision matters, these data types are invaluable.

Here is an example:

CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name VARCHAR(50),
    Salary DECIMAL(10,2)
);
SQL
In the above example, the 'Salary' column will store numbers with up to 10 digits in total, of which 2 digits are after the decimal point.
